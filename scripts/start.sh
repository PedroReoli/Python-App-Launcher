#!/bin/bash

# ========================================
# üöÄ PYTHON APP LAUNCHER - AUTOMATIZADOR COMPLETO
# ========================================
# Vers√£o: 3.0.0 - AUTOMATIZA√á√ÉO TOTAL
# Autor: Python App Launcher Team
# ========================================

echo ""
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë              üöÄ PYTHON APP LAUNCHER v3.0.0                   ‚ïë"
echo "‚ïë                    AUTOMATIZADOR COMPLETO                    ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  ü§ñ Instalando, configurando e executando tudo automaticamente! ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# ========================================
# 1. VERIFICA√á√ïES INICIAIS
# ========================================

echo "üìã [1/8] Verificando ambiente inicial..."
echo ""

# Verificar se estamos no diret√≥rio correto
if [ ! -f "main.py" ]; then
    echo "‚ùå ERRO: Arquivo main.py n√£o encontrado!"
    echo ""
    echo "üìÅ Diret√≥rio atual: $(pwd)"
    echo ""
    echo "üí° Certifique-se de estar no diret√≥rio raiz da aplica√ß√£o."
    echo ""
    exit 1
fi

echo "‚úÖ Diret√≥rio correto verificado"
echo ""

# ========================================
# 2. VERIFICA√á√ÉO E INSTALA√á√ÉO DO PYTHON
# ========================================

echo "üìã [2/8] Verificando Python..."
echo ""

# Verificar se Python est√° instalado
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 n√£o encontrado! Instalando automaticamente..."
    echo ""
    
    # Detectar sistema operacional
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        if command -v apt-get &> /dev/null; then
            echo "üì• Instalando Python3 via apt-get..."
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip python3-venv
        elif command -v yum &> /dev/null; then
            echo "üì• Instalando Python3 via yum..."
            sudo yum install -y python3 python3-pip
        elif command -v dnf &> /dev/null; then
            echo "üì• Instalando Python3 via dnf..."
            sudo dnf install -y python3 python3-pip
        else
            echo "‚ùå Gerenciador de pacotes n√£o suportado."
            echo "üí° Instale Python3 manualmente: https://www.python.org/downloads/"
            exit 1
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        if command -v brew &> /dev/null; then
            echo "üì• Instalando Python3 via Homebrew..."
            brew install python3
        else
            echo "‚ùå Homebrew n√£o encontrado."
            echo "üí° Instale Homebrew: https://brew.sh/"
            echo "üí° Ou instale Python3 manualmente: https://www.python.org/downloads/"
            exit 1
        fi
    else
        echo "‚ùå Sistema operacional n√£o suportado."
        echo "üí° Instale Python3 manualmente: https://www.python.org/downloads/"
        exit 1
    fi
    
    # Verificar instala√ß√£o
    if ! command -v python3 &> /dev/null; then
        echo "‚ùå Falha na instala√ß√£o do Python3."
        exit 1
    fi
else
    echo "‚úÖ Python3 encontrado:"
    python3 --version
fi

echo ""

# ========================================
# 3. VERIFICA√á√ÉO E INSTALA√á√ÉO DO PIP
# ========================================

echo "üìã [3/8] Verificando pip..."
echo ""

# Verificar se pip est√° dispon√≠vel
if ! command -v pip3 &> /dev/null; then
    echo "‚ùå pip3 n√£o encontrado! Instalando..."
    echo ""
    
    # Tentar instalar pip
    python3 -m ensurepip --upgrade
    
    # Verificar novamente
    if ! command -v pip3 &> /dev/null; then
        echo "‚ùå Falha ao instalar pip3."
        echo "üí° Tente executar: python3 -m ensurepip --upgrade"
        echo ""
        exit 1
    fi
else
    echo "‚úÖ pip3 encontrado:"
    pip3 --version
fi

echo ""

# ========================================
# 4. INSTALA√á√ÉO DE DEPEND√äNCIAS PYTHON
# ========================================

echo "üìã [4/8] Instalando depend√™ncias Python..."
echo ""

# Verificar se requirements.txt existe
if [ -f "requirements.txt" ]; then
    echo "üì¶ Instalando depend√™ncias do requirements.txt..."
    
    # Atualizar pip primeiro
    python3 -m pip install --upgrade pip > /dev/null 2>&1
    
    # Instalar depend√™ncias
    pip3 install -r requirements.txt
    
    if [ $? -ne 0 ]; then
        echo "‚ö†Ô∏è  Algumas depend√™ncias podem ter falhado. Continuando..."
    else
        echo "‚úÖ Depend√™ncias instaladas com sucesso!"
    fi
else
    echo "‚ö†Ô∏è  requirements.txt n√£o encontrado. Instalando depend√™ncias b√°sicas..."
    
    # Instalar depend√™ncias b√°sicas
    pip3 install psutil requests urllib3 typing-extensions > /dev/null 2>&1
    echo "‚úÖ Depend√™ncias b√°sicas instaladas!"
fi

echo ""

# ========================================
# 5. INSTALA√á√ÉO E CONFIGURA√á√ÉO DO OLLAMA
# ========================================

echo "üìã [5/8] Configurando sistema de IA (Ollama)..."
echo ""

# Verificar se Ollama j√° est√° instalado
if ! command -v ollama &> /dev/null; then
    echo "ü§ñ Ollama n√£o encontrado! Instalando automaticamente..."
    echo ""
    
    # Detectar sistema operacional
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        echo "üì• Baixando Ollama para Linux..."
        curl -fsSL https://ollama.ai/install.sh | sh
        
        if [ $? -ne 0 ]; then
            echo "‚ùå Falha na instala√ß√£o do Ollama."
            echo "üí° Tente instalar manualmente: https://ollama.ai/download"
            echo ""
        else
            echo "‚úÖ Ollama instalado com sucesso!"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        echo "üì• Baixando Ollama para macOS..."
        curl -fsSL https://ollama.ai/install.sh | sh
        
        if [ $? -ne 0 ]; then
            echo "‚ùå Falha na instala√ß√£o do Ollama."
            echo "üí° Tente instalar manualmente: https://ollama.ai/download"
            echo ""
        else
            echo "‚úÖ Ollama instalado com sucesso!"
        fi
    else
        echo "‚ùå Sistema operacional n√£o suportado para Ollama."
        echo "üí° Instale manualmente: https://ollama.ai/download"
        echo ""
    fi
else
    echo "‚úÖ Ollama j√° est√° instalado:"
    ollama --version
fi

echo ""

# ========================================
# 6. INSTALA√á√ÉO DO MODELO LLAMA2
# ========================================

echo "üìã [6/8] Configurando modelo de IA..."
echo ""

# Verificar se modelo llama2 est√° instalado
if ! ollama list | grep -q "llama2"; then
    echo "üì¶ Modelo Llama2 n√£o encontrado! Instalando..."
    echo ""
    
    echo "‚è≥ Isso pode demorar alguns minutos..."
    ollama pull llama2
    
    if [ $? -ne 0 ]; then
        echo "‚ùå Falha ao instalar modelo Llama2."
        echo "üí° Tente instalar manualmente: ollama pull llama2"
        echo ""
    else
        echo "‚úÖ Modelo Llama2 instalado com sucesso!"
    fi
else
    echo "‚úÖ Modelo Llama2 j√° est√° instalado!"
fi

echo ""

# ========================================
# 7. INICIALIZA√á√ÉO DO SERVIDOR OLLAMA
# ========================================

echo "üìã [7/8] Iniciando servidor de IA..."
echo ""

# Verificar se servidor j√° est√° rodando
if ! curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
    echo "üöÄ Iniciando servidor Ollama..."
    
    # Iniciar servidor em background
    ollama serve > /dev/null 2>&1 &
    OLLAMA_PID=$!
    
    # Aguardar servidor iniciar
    echo "‚è≥ Aguardando servidor iniciar..."
    for i in {1..30}; do
        if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
            echo "‚úÖ Servidor Ollama iniciado com sucesso!"
            break
        fi
        sleep 1
    done
    
    if [ $i -eq 30 ]; then
        echo "‚ö†Ô∏è  Servidor pode n√£o ter iniciado completamente."
        echo "üí° Se houver problemas, execute manualmente: ollama serve"
        echo ""
    fi
else
    echo "‚úÖ Servidor Ollama j√° est√° rodando!"
fi

echo ""

# ========================================
# 8. CRIA√á√ÉO DE DIRET√ìRIOS NECESS√ÅRIOS
# ========================================

echo "üìã [8/8] Preparando estrutura de diret√≥rios..."
echo ""

# Criar diret√≥rios necess√°rios
if [ ! -d "logs" ]; then
    echo "üìÅ Criando diret√≥rio de logs..."
    mkdir -p logs
fi

if [ ! -d "docs" ]; then
    echo "üìÅ Criando diret√≥rio de documenta√ß√£o..."
    mkdir -p docs
fi

if [ ! -d "data" ]; then
    echo "üìÅ Criando diret√≥rio de dados..."
    mkdir -p data
fi

if [ ! -d "data/config" ]; then
    echo "üìÅ Criando diret√≥rio de configura√ß√£o..."
    mkdir -p data/config
fi

echo "‚úÖ Estrutura de diret√≥rios preparada!"
echo ""

# ========================================
# 9. VERIFICA√á√ÉO FINAL E EXECU√á√ÉO
# ========================================

echo "üéØ Verifica√ß√£o final do ambiente..."
echo ""

# Verificar depend√™ncias cr√≠ticas
ALL_GOOD=true

if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 n√£o est√° funcionando"
    ALL_GOOD=false
fi

if ! command -v pip3 &> /dev/null; then
    echo "‚ùå pip3 n√£o est√° funcionando"
    ALL_GOOD=false
fi

# Verificar m√≥dulos Python essenciais
if ! python3 -c "import tkinter" > /dev/null 2>&1; then
    echo "‚ùå tkinter n√£o est√° dispon√≠vel"
    ALL_GOOD=false
fi

if ! python3 -c "import psutil" > /dev/null 2>&1; then
    echo "‚ö†Ô∏è  psutil n√£o est√° dispon√≠vel (ser√° instalado automaticamente)"
fi

if ! python3 -c "import requests" > /dev/null 2>&1; then
    echo "‚ö†Ô∏è  requests n√£o est√° dispon√≠vel (ser√° instalado automaticamente)"
fi

if [ "$ALL_GOOD" = false ]; then
    echo ""
    echo "‚ùå ERRO: Ambiente n√£o est√° pronto!"
    echo ""
    echo "üí° Verifique as depend√™ncias e tente novamente."
    echo ""
    exit 1
fi

echo "‚úÖ Ambiente verificado e pronto!"
echo ""

# ========================================
# 10. EXECU√á√ÉO DA APLICA√á√ÉO
# ========================================

echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                    üöÄ INICIANDO APLICA√á√ÉO                    ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  ü§ñ Python App Launcher v3.0.0 + IA                         ‚ïë"
echo "‚ïë  üìä Sistema: $(uname -s)                                    ‚ïë"
echo "‚ïë  üêç Python: $(python3 --version)                            ‚ïë"
echo "‚ïë  ü§ñ IA: Ollama + Llama2                                     ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# Mostrar informa√ß√µes do sistema
echo "üìä Informa√ß√µes do sistema:"
python3 --version
echo "   - Sistema Operacional: $(uname -s)"
echo "   - Arquitetura: $(uname -m)"
echo "   - Diret√≥rio: $(pwd)"
echo ""

# Verificar argumentos especiais
PROFILE_MODE=""
DEBUG_MODE=""

for arg in "$@"; do
    if [ "$arg" = "--profile" ]; then
        PROFILE_MODE="--profile"
    elif [ "$arg" = "--debug" ]; then
        DEBUG_MODE="--debug"
    fi
done

# Executar a aplica√ß√£o
echo "üöÄ Iniciando Python App Launcher..."
echo ""

if [ -n "$DEBUG_MODE" ]; then
    echo "üîß Modo DEBUG ativado"
    python3 main.py --debug
elif [ -n "$PROFILE_MODE" ]; then
    echo "üìà Modo PROFILING ativado"
    python3 main.py --profile
else
    python3 main.py
fi

# ========================================
# 11. VERIFICA√á√ÉO P√ìS-EXECU√á√ÉO
# ========================================

# Verificar se a aplica√ß√£o foi executada com sucesso
if [ $? -ne 0 ]; then
    echo ""
    echo "‚ùå ERRO: A aplica√ß√£o foi encerrada com erro (c√≥digo: $?)"
    echo ""
    echo "üí° Verifique os logs em logs/ para mais detalhes."
    echo ""
    echo "üîß Poss√≠veis solu√ß√µes:"
    echo "   1. Verifique se todas as depend√™ncias est√£o instaladas"
    echo "   2. Execute: pip3 install -r requirements.txt"
    echo "   3. Verifique se o Ollama est√° rodando: ollama serve"
    echo "   4. Execute em modo debug: ./start.sh --debug"
    echo ""
else
    echo ""
    echo "‚úÖ Aplica√ß√£o encerrada com sucesso!"
    echo ""
fi

# ========================================
# 12. FINALIZA√á√ÉO
# ========================================

echo ""
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                    üëã OBRIGADO POR USAR                      ‚ïë"
echo "‚ïë                    PYTHON APP LAUNCHER                       ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  ü§ñ Agora com Intelig√™ncia Artificial integrada!            ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

echo "üìã Resumo da sess√£o:"
echo "   ‚úÖ Python3 verificado e configurado"
echo "   ‚úÖ Depend√™ncias instaladas"
echo "   ‚úÖ Ollama configurado"
echo "   ‚úÖ Modelo Llama2 instalado"
echo "   ‚úÖ Servidor de IA iniciado"
echo "   ‚úÖ Aplica√ß√£o executada"
echo ""

echo "üí° Dicas:"
echo "   - Use os bot√µes de IA na aplica√ß√£o"
echo "   - Experimente o chat com IA"
echo "   - Analise aplica√ß√µes automaticamente"
echo "   - Gere documenta√ß√£o com IA"
echo ""

# Limpar processo do Ollama se foi iniciado por este script
if [ -n "$OLLAMA_PID" ]; then
    echo "üîÑ Encerrando servidor Ollama..."
    kill $OLLAMA_PID 2>/dev/null
fi 